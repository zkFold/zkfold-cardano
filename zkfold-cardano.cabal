cabal-version:      3.0

name:               zkfold-cardano
version:            0.1.0.0
category:           Testing, Cryptography, Math, Symbolic Computation
author:             Vladimir Sinyakov, Ilya Baryshnikov
maintainer:         info@zkfold.io
license:            MIT
build-type:         Simple

common lang
  default-language:   Haskell2010
  default-extensions:
    DeriveFoldable
    DeriveFunctor
    DeriveGeneric
    DeriveLift
    DeriveTraversable
    DerivingStrategies
    DerivingVia
    ImportQualifiedPost
    LambdaCase
    NumericUnderscores
    GeneralizedNewtypeDeriving
    StandaloneDeriving
    ViewPatterns
    AllowAmbiguousTypes
    FlexibleContexts
    RankNTypes
    TypeApplications
    DataKinds
    InstanceSigs
    MultiParamTypeClasses
    RecordWildCards
    ScopedTypeVariables
    FlexibleInstances
    NoImplicitPrelude
  ghc-options:
    -Wall
    -Wnoncanonical-monad-instances
    -Wincomplete-uni-patterns
    -Wincomplete-record-updates
    -Wredundant-constraints
    -Widentities
    -- -Wunused-packages
    -Wmissing-deriving-strategies

library
  import: lang
  default-language: Haskell2010
  exposed-modules:
    ZkFold.Cardano.ScriptsVerifier
    ZkFold.Cardano.Plonk
    ZkFold.Cardano.Plonk.OnChain
    ZkFold.Cardano.Plonk.OffChain
  build-depends:
    aeson                                      ,
    base                          >= 4.9 && < 5,
    containers                                 ,
    plutus-ledger-api                   ^>=1.24,
    plutus-tx                           ^>=1.24,
    plutus-tx-plugin                    ^>=1.24,
    zkfold-base                                ,
    vector                                     ,
  hs-source-dirs: src

test-suite test
  import: lang
  default-language: Haskell2010
  type:             exitcode-stdio-1.0
  ghc-options:      -rtsopts
  main-is:          Main.hs
  other-modules:
    Tests.Verifier
    Tests.Data
  build-depends:
    aeson                                      ,
    base                          >= 4.9 && < 5,
    bytestring                                 ,
    containers                                 ,
    hspec                                      ,
    QuickCheck                                 ,
    zkfold-base                                ,
    zkfold-cardano                             ,
  hs-source-dirs: test

benchmark bench-uplc
  import: lang
  default-language: Haskell2010
  type:             exitcode-stdio-1.0
  main-is:          Main.hs
  hs-source-dirs:   bench-uplc
  other-modules:    Bench.Scripts
  build-depends:
    aeson                                      ,
    base                                       ,
    bytestring                                 ,
    containers                                 ,
    flat                                       ,
    plutus-core                         ^>=1.24,
    plutus-ledger-api                   ^>=1.24,
    plutus-tx                           ^>=1.24,
    plutus-tx-plugin                    ^>=1.24,
    zkfold-base                                ,
    zkfold-cardano                             ,

  ghc-options:
    -Wall
    -fobject-code
    -fno-ignore-interface-pragmas
    -fno-omit-interface-pragmas
    -fno-strictness
    -fno-spec-constr
    -fno-specialise
    -fexpose-all-unfoldings
    -fplugin-opt PlutusTx.Plugin:defer-errors

executable bench-cpu-mem
  import:           lang
  default-language: Haskell2010
  main-is:          Main.hs
  other-modules:
    Bench.Statistics
    Bench.Scripts
  hs-source-dirs:   bench-cpu-mem
  build-depends:
    aeson                                      ,
    base                            >=4.9 && <5,
    bytestring                                 ,
    containers                                 ,
    flat                                       ,
    plutus-core                         ^>=1.24,
    plutus-tx                           ^>=1.24,
    plutus-tx-plugin                    ^>=1.24,
    zkfold-base                                ,
    zkfold-cardano                             ,
  ghc-options:
    -fno-specialise
    -fno-spec-constr
    -fno-ignore-interface-pragmas
    -fno-omit-interface-pragmas
    -fno-strictness
    -fno-unbox-strict-fields 
    -fno-unbox-small-strict-fields
    -fno-full-laziness
