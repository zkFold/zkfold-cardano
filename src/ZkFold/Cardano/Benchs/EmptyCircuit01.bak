{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedLabels #-}

module ZkFold.Cardano.Benchs.EmptyCircuit where

-- import           GHC.ByteOrder                            (ByteOrder(..))
-- import           PlutusLedgerApi.V3                       (ScriptContext (..))
-- import           PlutusTx.Builtins                        (byteStringToInteger, greaterThanInteger)
-- import           PlutusTx.Prelude                         (Integer, ($), (.))
-- import qualified PlutusTx.Prelude                         as Tx (Bool (..))

-- import           ZkFold.Base.Protocol.NonInteractiveProof (NonInteractiveProof (..))
-- import           ZkFold.Cardano.Plonk                     (PlonkPlutus)
-- import           ZkFold.Cardano.Plonk.OnChain.Data        (ProofBytes, SetupBytes)
-- import           ZkFold.Cardano.Plonk.OnChain.Utils       (dataToBlake, toInput)
-- import           ZkFold.Symbolic.Compiler                 (ArithmeticCircuit, compileForceOne)
-- import           ZkFold.Base.Algebra.EllipticCurve.BLS12_381 (BLS12_381_G1, Fr)
-- import           ZkFold.Symbolic.Data.Bool                   (Bool (..))

{-
type C = ArithmeticCircuit (Zp BLS12_381_Scalar)

data EmptyCircuit = EmptyCircuit (C Vector 0) (Vector 0)

emptyCircuit :: EmptyCircuit
emptyCircuit = compile ()

-- expr :: Bool (ArithmeticCircuit Fr)
-- expr = compileForceOne @Fr (\_ -> Tx.True)

expr :: ArithmeticCircuit Fr
expr = mempty
-}

import           ZkFold.Base.Algebra.Basic.Field             (Zp)
import           ZkFold.Base.Algebra.EllipticCurve.BLS12_381 (BLS12_381_Scalar)
import           ZkFold.Base.Algebra.Basic.Number            (KnownNat)
import           ZkFold.Base.Data.Vector                     (Vector)

import           ZkFold.Symbolic.Class             (Symbolic)
import           ZkFold.Symbolic.Compiler          (ArithmeticCircuit, compile)
import           ZkFold.Symbolic.Data.Bool         (Bool)
import           ZkFold.Symbolic.Data.Eq           (Eq (..))
import           ZkFold.Symbolic.Data.FieldElement (FieldElement)
import           ZkFold.Symbolic.Data.Class

-- | (==) operation
exampleEq :: Symbolic c => FieldElement c -> FieldElement c -> Bool c
exampleEq x y = x == y

type C = ArithmeticCircuit (Zp BLS12_381_Scalar)

{-
data ExampleOutput where
  ExampleOutput
    :: forall i_n o_n. KnownNat i_n
    => (() -> C (Vector i_n) (Vector o_n))
    -> ExampleOutput
-}
